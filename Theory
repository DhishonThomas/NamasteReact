What is JSX?

JSX is a syntax extension for JavaScript, commonly used with React to describe what the UI should look like. It allows you to write HTML-like code directly within your JavaScript files.

example::
const element = <h1>Hello, JSX!</h1>;

In this example, <h1> is not a string but a JSX syntax that represents a React element.

././././././././././././././././././././././././././././././././././././././././././././

Superpowers of JSX?

Readability.
Developer experince
No Repitation
Less code
Maintainability


 Benefits of JSX


Readability: JSX resembles HTML, making it easier to understand and write compared to verbose JavaScript function calls.
Familiarity: Developers with experience in HTML find JSX more intuitive and natural to work with.
Efficiency: JSX allows you to write UI components more quickly and concisely, reducing development time.

././././././././././././././././././././././././././././././././././././././././././././


././././././././././././././././././././././././././././././././././././././././././././
React.createElement vs JSX

While JSX is more readable and intuitive, behind the scenes, it gets converted into regular JavaScript function calls using React.createElement(). For example, the JSX code:


const element = <h1>Hello, JSX!</h1>;


Gets converted into:

const element = React.createElement('h1', null, 'Hello, JSX!');

Both approaches accomplish the same result, but JSX simplifies the process and makes the code more readable.
././././././././././././././././././././././././././././././././././././././././././././.

././././././././././././././././././././././././././././././././././././././././././././
Behind the Scenes of JSX

When you write JSX code, it needs to be transformed into plain JavaScript for the browser to understand. Tools like Babel and Parcel handle this transformation process. Babel transpiles JSX into regular JavaScript code, making it compatible with all browsers. Parcel bundles and optimizes your JavaScript code, including JSX, for production.


JSX => React.createElement=>Object=>HTML (DOM)

"Here Bable is converting JSX to React.createElemnt()  and it will give a Object and that Object will be turn to HTML (DOM)"

././././././././././././././././././././././././././././././././././././././././././././


././././././././././././././././././././././././././././././././././././././././././././
Components

Components are the building blocks of React applications. They are reusable pieces of UI that encapsulate both structure and behavior. Components can be of two types:

**Functional Components: These are JavaScript functions that accept props (input data) and return JSX to describe the UI. They are simpler and more lightweight.

**Class Components: These are ES6 classes that extend React.Component. They have additional features like state and lifecycle methods.


Functional Component is a normal function it is just returing a jsx or react element;;

././././././././././././././././././././././././././././././././././././././././././././



././././././././././././././././././././././././././././././././././././././././././././
Composing Components

Composing components involves combining multiple smaller components to create more complex UIs. This allows for better code organization, reusability, and maintainability. For example, you might compose a Header, Sidebar, and Footer component to create a complete layout for a web page.
././././././././././././././././././././././././././././././././././././././././././././




././././././././././././././././././././././././././././././././././././././././././././

Component Composition

if we have to use a component inside comoponet is called component composition.

././././././././././././././././././././././././././././././././././././././././././././

././././././././././././././././././././././././././././././././././././././././././././

Role of the type attribute in the <script> tag

The type attribute in the <script> tag specifies the media type (MIME type) of the script. It tells the browser how to interpret the contents of the script block. Common values for the type attribute include:

*text/javascript: Specifies JavaScript code.
*text/ecmascript: Specifies ECMAScript code.
*module: Specifies that the script is a module (introduced in ECMAScript 6).

Using the correct type attribute ensures that the browser handles the script appropriately.

././././././././././././././././././././././././././././././././././././././././././././


././././././././././././././././././././././././././././././././././././././././././././

JSX Syntax: {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>}

In JSX, all three of these syntaxes represent the same thing: the rendering of the TitleComponent. Let's break them down:

{TitleComponent}: This syntax is used to render the TitleComponent without any additional JSX elements around it. It's typically used when you want to render a component directly within another component's JSX code.

{<TitleComponent/>}: This syntax uses self-closing tags (<TitleComponent/>) to render the TitleComponent. It's equivalent to the first syntax but explicitly indicates that the component is self-contained and doesn't have any children.

{<TitleComponent></TitleComponent>}: This syntax explicitly wraps the TitleComponent within opening and closing tags (<TitleComponent> and </TitleComponent>). While functionally the same as the previous syntax, it may be used when you want to add additional JSX elements as children of the TitleComponent.

././././././././././././././././././././././././././././././././././././././././././././